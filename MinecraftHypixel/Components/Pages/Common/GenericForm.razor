@using System.Reflection
@using System.ComponentModel.DataAnnotations
@using MinecraftHypixel.Models
@typeparam T

@if(Model!=null)
{
    <EditForm Model="@Model" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        @foreach (PropertyInfo property in typeof(T).GetProperties())
        {
            <div>
                <label>@property.Name:</label>
               @{
                    Type propertyType = property.PropertyType;
                    Type underlyingType = Nullable.GetUnderlyingType(propertyType) ?? propertyType;


                    if (underlyingType == typeof(string))
                    {
                        <input id="@property.Name" @oninput='(e) => HandleInputChange(e, property.Name)' class="form-control" />
                    }
                    else if (underlyingType == typeof(int))
                    {
                        <input id="@property.Name" type="number" step="1" @oninput='(e) => HandleInputChange(e, property.Name)' class="form-control" />
                    }
                }
            </div>
        }

        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>

}
@code {
    [Parameter] public T? Model { get; set; }
    [Parameter] public EventCallback<T> OnValidSubmit { get; set; }
    private IEnumerable<DinamicFormClass>? _propertyList;
    private void HandleInputChange(ChangeEventArgs e,string propertyName)
    {
        PropertyInfo? property = typeof(T).GetProperty(propertyName);

        if (property!=null && e.Value!=null)
        {
            Type propertyType = property.PropertyType;
            Type underlyingType = Nullable.GetUnderlyingType(propertyType) ?? propertyType;
            if (underlyingType == typeof(string))
            {
                property.SetValue(Model, e.Value);

            }
            else if (underlyingType == typeof(int))
            {
                if(int.TryParse(e.Value.ToString(), out int parsedValue))
                {
                    property.SetValue(Model, parsedValue);
                }

            }
            else if (underlyingType == typeof(double))
            {
                property.SetValue(Model, (double)e.Value);

            }
            else if (underlyingType == typeof(DateTime))
            {
                property.SetValue(Model, (DateTime)e.Value);

            }
            else if (underlyingType == typeof(bool))
            {
                property.SetValue(Model, (bool)e.Value);
            }

        }
    }
    public static List<ValidationResult> ValidateModel(object model)
    {
        var results = new List<ValidationResult>();
        var context = new ValidationContext(model, serviceProvider: null, items: null);
        Validator.TryValidateObject(model, context, results, validateAllProperties: true);

        return results;
    }

    private async Task HandleValidSubmit()
    {
        if (OnValidSubmit.HasDelegate)
        {
            await OnValidSubmit.InvokeAsync(Model);
        }
    }
    protected override void OnInitialized()
    {
        List<DinamicFormClass> propertyList = new List<DinamicFormClass>();
        foreach (PropertyInfo property in typeof(T).GetProperties())
        {
            DinamicFormClass formClass = new DinamicFormClass(property);
            propertyList.Add(formClass);
        }
        
    }
}
